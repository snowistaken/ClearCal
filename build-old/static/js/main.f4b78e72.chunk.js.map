{"version":3,"sources":["components/calendar-container.js","api-service.js","components/event-form.js","App.js","components/auth.js","serviceWorker.js","index.js"],"names":["CalendarContainer","API","event_id","body","token","fetch","method","headers","JSON","stringify","then","resp","json","EventForm","props","useCookies","userId","useState","title","setTitle","description","setDescription","start","setStart","end","setEnd","useEffect","eventToEdit","htmlFor","id","type","placeholder","value","onChange","evt","target","onClick","updateEvent","all_day","organizer","shifts","updateEvents","catch","error","console","log","createEvent","window","location","href","App","setEvents","setUserView","formatEvents","events","formattedEvents","map","event","allDay","Date","Auth","username","setUsername","password","setPassword","setToken","setUserId","loginUser","Boolean","hostname","match","ReactDOM","render","CookiesProvider","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f4b78e72.chunk.js","sourcesContent":["import React from 'react'\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport { Calendar, momentLocalizer, Views } from 'react-big-calendar';\nimport moment from 'moment';\n\n\nfunction CalendarContainer(props) {\n  const localizer = momentLocalizer(moment);\n\n  const onSelectedEvent = selectedEvent => {\n    props.setSelectedEvent(selectedEvent)\n    props.openDetails(true)\n  };\n\n  return (\n      <Calendar\n        popup\n        selectable\n        localizer={localizer}\n        events={props.events}\n        defaultView={Views.MONTH}\n        scrollToTime={new Date(1970, 1, 1, 6)}\n        onSelectEvent={event => onSelectedEvent(event)}\n        className='calendar'\n      />\n  );\n};\n\n// const localizer = momentLocalizer(moment)\n\n// const propTypes = {}\n\n// class Selectable extends React.Component {\n//   constructor(...args) {\n//     super(...args)\n\n//     this.state = { events }\n//   };\n  \n//   handleSelect = ({ start, end }) => {\n//     const title = window.prompt('New Event name')\n//     if (title)\n//       console.log(this)\n//       this.setState({\n//         events: [\n//           ...this.state.events,\n//           {\n//             start,\n//             end,\n//             title,\n//           },\n//         ],\n//       })\n//   }\n\n//   render() {\n//     const localizer = momentLocalizer(moment);\n\n//     return (\n//       <>\n//         <Calendar\n//           selectable\n//           localizer={localizer}\n//           events={this.state.events}\n//           defaultView={Views.MONTH}\n//           scrollToTime={new Date(1970, 1, 1, 6)}\n//           defaultDate={new Date(2015, 3, 12)}\n//           onSelectEvent={event => alert(event.title)}\n          // onSelectSlot={this.handleSelect}\n//           style={{ minHeight: '100vh' }}\n//         />\n//       </>\n//     )\n//   }\n// }\n\n// Selectable.propTypes = propTypes\n\nexport default CalendarContainer;","export default class API {\n  static updateEvent(event_id, body, token) {\n    return fetch(`http://127.0.0.1:8000/api/events/${event_id}/`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Token ${token}`\n      },\n      body: JSON.stringify( body )\n    }).then( resp => resp.json())\n  }\n\n  static createEvent(body, token) {\n    return fetch(`http://127.0.0.1:8000/api/events/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Token ${token}`\n      },\n      body: JSON.stringify( body )\n    }).then( resp => resp.json())\n  }\n\n  static deleteEvent(event_id, token, body) {\n    return fetch(`http://127.0.0.1:8000/api/events/${event_id}/`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Token ${token}`\n      },\n      body: JSON.stringify( body )\n    })\n  }\n\n  static loginUser(body) {\n    return fetch(`http://127.0.0.1:8000/auth/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify( body )\n    }).then( resp => resp.json())\n  }\n}","import React, {useState, useEffect} from 'react'\nimport API from '../api-service'\nimport { useCookies } from 'react-cookie'\n\n\nfunction EventForm(props) {\n \n  const [ token ] = useCookies(['cc-token']);\n  const [ userId ] = useCookies(['cc-user-id']);\n\n  const [ title, setTitle ] = useState('');\n  const [ description, setDescription ] = useState('');\n  const [ start, setStart ] = useState('');\n  const [ end, setEnd ] = useState('');\n\n  useEffect( () => {\n    if (!props.eventToEdit)\n      {setTitle('')\n      setDescription('')}\n    else\n      {setTitle(props.eventToEdit.title)\n      setDescription(props.eventToEdit.description)};\n\n  }, [props.eventToEdit]);\n\n  const updateClicked = () => {\n    API.updateEvent(props.eventToEdit.id, {title: title, description: description, all_day: false, start: props.eventToEdit.start, end: props.eventToEdit.end, organizer: userId['cc-user-id'], shifts:[]}, token['cc-token'])\n    .then( resp => props.updateEvents(resp))\n    .catch( error => console.log(error))\n  };\n\n  const createClicked = () => {\n    API.createEvent({title, description, all_day: false, start, end, organizer: '1', shifts:[]}, token['cc-token'])\n    .then( resp => console.log(resp))\n    .then( window.location.href = '/' )\n    .catch( error => console.log(error))\n  };\n\n  return (\n    <div>\n      { props.eventToEdit ? (\n        <div>\n          <label htmlFor=\"title\">Title</label><br/>\n          <input id=\"title\" type=\"text\" placeholder=\"title\" value={title}\n            onChange={ evt => setTitle(evt.target.value) }\n          /><br/>\n          <label htmlFor=\"description\" id=\"description\">Description</label><br/>\n          <textarea id=\"description\" type=\"text\" placeholder=\"description\" value={description}\n            onChange={ evt => setDescription(evt.target.value) }>\n          </textarea><br/>\n          <button onClick={updateClicked}>Update</button>\n          \n        </div>\n      ) : \n        <div>\n          <label htmlFor=\"title\">Title</label><br/>\n          <input id=\"title\" type=\"text\" placeholder=\"title\" value={title}\n            onChange={ evt => setTitle(evt.target.value) }\n          /><br/>\n          <label htmlFor=\"description\" id=\"description\">Description</label><br/>\n          <textarea id=\"description\" type=\"text\" placeholder=\"description\" value={description}\n            onChange={ evt => setDescription(evt.target.value) }>\n          </textarea><br/>\n          <label htmlFor=\"start\" id=\"start\">Start</label><br/>\n          <textarea id=\"start\" type=\"date\" placeholder=\"start\" value={start}\n            onChange={ evt => setStart(evt.target.value) }>\n          </textarea><br/>\n          <label htmlFor=\"end\" id=\"end\">End</label><br/>\n          <textarea id=\"end\" type=\"date\" placeholder=\"end\" value={end}\n            onChange={ evt => setEnd(evt.target.value) }>\n          </textarea><br/>\n          <button onClick={createClicked}>Add</button>\n        </div>\n      }\n      </div>\n    );\n};\n\nexport default EventForm;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport UserView from './components/user-view';\nimport StandardView from './components/standard-view';\nimport { useCookies } from 'react-cookie';\n\nfunction App() {\n\n  const [ token, setToken, deleteToken ] = useCookies(['cc-token']);\n  const [ userId, setUserId, deleteUserId ] = useCookies(['cc-user-id']);\n\n  const [ selectedEvent, setSelectedEvent ] = useState(null);\n  const [ events, setEvents ] = useState([]);\n  const [ visible, setVisible ] = useState(false)\n  const [ userView, setUserView ] = useState(false)\n\n  useEffect(() => {\n    fetch(\"http://127.0.0.1:8000/api/events/\", {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    })\n    .then( resp => resp.json())\n    .then( resp => formatEvents(resp))\n    .catch( error => console.log(error) )\n  }, [])\n\n  useEffect( () => {\n\n    if (token['cc-token'])\n      setUserView(true)\n    else\n      setUserView(false);\n  \n  }, [token])\n\n  const formatEvents = (events) => {\n    const formattedEvents = events.map(event => {\n      return ({\n        id: event.id,\n        title: event.title,\n        description: event.title,\n        allDay: false,\n        start: new Date (event.start),\n        end: new Date (event.end),\n        organizer: event.organizer\n      })\n    })\n    console.log(formattedEvents)\n    setEvents(formattedEvents)\n  }\n\n  const createEvent = () => {\n    window.location.href = '/create-event'\n  }\n\n  const login = () => {\n    window.location.href = '/auth'\n  }\n\n  const logout = () => {\n    deleteToken(['cc-token']);\n    deleteUserId(['cc-user-id']);\n  }\n\n  const closeDetails = () => {\n    setVisible(false)\n    setSelectedEvent(null)\n  }\n\n  const openDetails = () => {\n    setVisible(true)\n  }\n\n  const eventCreated = newEvent => {\n    const newEvents = [...events, newEvent];\n    setEvents(newEvents);\n  }\n\n  return (\n    // <React.Fragment className='App'>\n      // <div className='layout'>\n      //   { token['cc-token'] ?\n      //     <Fab variant=\"extended\" className='login' size='medium' onClick={login}>\n      //       <SvgIcon />\n      //         Logout\n      //     </Fab>\n      //     :\n      //     <Fab variant=\"extended\" className='login' size='medium' onClick={login}>\n      //       <SvgIcon />\n      //         Login\n      //     </Fab>\n      //   }\n      //   {/* <button className='button, calendar-buttons' onClick={createEvent} >Create New Event</button> */}\n      //   <Tooltip title='Create Event'>\n      //     <Fab color=\"primary\" aria-label=\"add\" className='calendar-buttons' size='medium' onClick={createEvent}>\n      //       <AddIcon />\n      //     </Fab>\n      //   </Tooltip>\n      //   <CalendarContainer setSelectedEvent={setSelectedEvent} openDetails={openDetails} events={events}/>\n      //   <EventDetails closeDetails={closeDetails} visible={visible} event={selectedEvent}></EventDetails>\n      // </div>\n    // </React.Fragment>\n\n    <div>\n      { userView ?\n        (<UserView setEvents={setEvents} setSelectedEvent={setSelectedEvent} selectedEvent={selectedEvent} events={events} visible={visible} createEvent={createEvent} login={login} logout={logout} closeDetails={closeDetails} openDetails={openDetails} eventCreated={eventCreated} userView={userView} />)\n        :\n        (<StandardView setSelectedEvent={setSelectedEvent} selectedEvent={selectedEvent} events={events} visible={visible} createEvent={createEvent} login={login} logout={logout} closeDetails={closeDetails} openDetails={openDetails} eventCreated={eventCreated} userView={userView} />)\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState, useEffect } from 'react';\nimport API from '../api-service';\nimport { useCookies } from 'react-cookie';\n\nfunction Auth(){\n\n  const [ username, setUsername ] = useState('');\n  const [ password, setPassword ] = useState('');\n\n  const [ token, setToken ] = useCookies(['cc-token']);\n  const [ userId, setUserId ] = useCookies(['cc-user-id']);\n\n  useEffect( () => {\n    console.log(token);\n    if(token['cc-token']) window.location.href = '/'\n  }, [token]);\n\n  const loginClicked = () => {\n    API.loginUser({username, password})\n    .then( (resp) => {\n      setUserId('cc-user-id', resp.id)\n      setToken('cc-token', resp.token)\n    })\n    .catch( error => console.log(error) )\n  };\n\n  return (\n    <div>\n      <h1>Login</h1>\n      \n      <label htmlFor=\"username\">Username</label><br/>\n      <input id=\"username\" type=\"text\" placeholder=\"username\" value={username}\n        onChange={ evt => setUsername(evt.target.value) }\n      /><br/>\n      <label htmlFor=\"password\" id=\"password\">Password</label><br/>\n      <input id=\"password\" type=\"password\" placeholder=\"password\" value={password}\n        onChange={ evt => setPassword(evt.target.value) } /><br/>\n        <button onClick={loginClicked}>Login</button>\n    </div>\n  );\n};\n\nexport default Auth;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Auth from './components/auth'\nimport EventForm from './components/event-form'\nimport * as serviceWorker from './serviceWorker';\nimport { Route, BrowserRouter } from 'react-router-dom'\nimport { CookiesProvider } from 'react-cookie'\n\nReactDOM.render(\n    <CookiesProvider>\n        <BrowserRouter>\n          <Route exact path=\"/auth\" component={Auth} />\n          <Route exact path=\"/create-event\" component={EventForm} />\n          <Route exact path=\"/\" component={App} />\n        </BrowserRouter>\n      </CookiesProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}